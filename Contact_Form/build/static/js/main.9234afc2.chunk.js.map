{"version":3,"sources":["ContactForm.js","App.js","index.js"],"names":["ContactForm","useForm","register","handleSubmit","reset","errors","formState","useState","disabled","setDisabled","onSubmit","data","a","name","email","subject","Phone","message","templateParams","emailjs","send","process","REACT_APP_SERVICE_ID","REACT_APP_TEMPLATE_ID","REACT_APP_USER_ID","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","className","toastId","console","log","id","noValidate","type","required","value","maxLength","placeholder","pattern","rows","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9234afc2.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport emailjs from 'emailjs-com';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\n\r\nconst ContactForm = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm();\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  const toastifySuccess = () => {\r\n    toast('Form sent!', {\r\n      position: 'bottom-right',\r\n      autoClose: 5000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: false,\r\n      className: 'submit-feedback success',\r\n      toastId: 'notifyToast'\r\n    });\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    // Destrcture data object\r\n    const { name, email, subject,Phone ,message } = data;\r\n    try {\r\n      // Disable form while processing submission\r\n      setDisabled(true);\r\n\r\n      // Define template params\r\n      const templateParams = {\r\n        name,\r\n        email,\r\n        subject,\r\n        Phone,\r\n        message\r\n      };\r\n\r\n      // Use emailjs to email contact form data\r\n      await emailjs.send(\r\n        process.env.REACT_APP_SERVICE_ID,\r\n        process.env.REACT_APP_TEMPLATE_ID,\r\n        templateParams,\r\n        process.env.REACT_APP_USER_ID\r\n      );\r\n\r\n      // Reset contact form fields after submission\r\n      reset();\r\n      // Display success toast\r\n      toastifySuccess();\r\n      // Re-enable form submission\r\n      setDisabled(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='ContactForm'>\r\n      <div className='container'>\r\n        <div className='row'>\r\n          <div className='col-12 text-center'>\r\n            <div className='contactForm'>\r\n              <form id='contact-form' onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                {/* Row 1 of form */}\r\n                <div className='row formRow'>\r\n                  <div className='col-6'>\r\n                    <input\r\n                      type='text'\r\n                      name='name'\r\n                      {...register('name', {\r\n                        required: {\r\n                          value: true,\r\n                          message: 'Please enter your name'\r\n                        },\r\n                        maxLength: {\r\n                          value: 30,\r\n                          message: 'Please use 30 characters or less'\r\n                        }\r\n                      })}\r\n                      className='form-control formInput'\r\n                      placeholder='Name'\r\n                    ></input>\r\n                    {errors.name && <span className='errorMessage'>{errors.name.message}</span>}\r\n                  </div>\r\n                  <div className='col-6'>\r\n                    <input\r\n                      type='email'\r\n                      name='email'\r\n                      {...register('email', {\r\n                        required: true,\r\n                        pattern:\r\n                          /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n                      })}\r\n                      className='form-control formInput'\r\n                      placeholder='Email address'\r\n                    ></input>\r\n                    {errors.email && (\r\n                      <span className='errorMessage'>Please enter a valid email address</span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {/* Row 2 of form */}\r\n                <div className='row formRow'>\r\n                  <div className='col'>\r\n                    <input\r\n                      type='text'\r\n                      name='subject'\r\n                      {...register('subject', {\r\n                        required: {\r\n                          value: true,\r\n                          message: 'Please enter a subject'\r\n                        },\r\n                        maxLength: {\r\n                          value: 75,\r\n                          message: 'Subject cannot exceed 75 characters'\r\n                        }\r\n                      })}\r\n                      className='form-control formInput'\r\n                      placeholder='Subject'\r\n                    ></input>\r\n                    {errors.subject && (\r\n                      <span className='errorMessage'>{errors.subject.message}</span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className='row formRow'>\r\n                  <div className='col'>\r\n                    <input\r\n                      type='number'\r\n                      name='phone'\r\n                      {...register('subject', {\r\n                        required: {\r\n                          value: true,\r\n                          message: 'Please enter your mobile number'\r\n                        },\r\n                        maxLength: {\r\n                          value: 75,\r\n                          message: 'Subject cannot exceed 10 digits'\r\n                        }\r\n                      })}\r\n                      className='form-control formInput'\r\n                      placeholder='Mobile Number'\r\n                    ></input>\r\n                    {errors.subject && (\r\n                      <span className='errorMessage'>{errors.subject.message}</span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {/* Row 3 of form */}\r\n                <div className='row formRow'>\r\n                  <div className='col'>\r\n                    <textarea\r\n                      rows={3}\r\n                      name='message'\r\n                      {...register('message', {\r\n                        required: true\r\n                      })}\r\n                      className='form-control formInput'\r\n                      placeholder='Message'\r\n                    ></textarea>\r\n                    {errors.message && <span className='errorMessage'>Please enter a message</span>}\r\n                  </div>\r\n                </div>\r\n\r\n                <button className='submit-btn' disabled={disabled} type='submit'>\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n            <ToastContainer />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import ContactForm from './ContactForm';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='App'>\r\n      <div className='container'>\r\n        <h1 className='text-center'>Contact Us</h1>\r\n        <ContactForm />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}